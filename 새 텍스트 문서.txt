객체들의 움직임이나 변화들을 표현하기 위해 시간이 필요

시간의 개념이 없는 코드의 문제점: 성능이 다른 pc에서 다른 결과가 나옴
=> 성능에 관계없이 동일한 성능을 내도록 시간을 통해 동작을 조절

로직 -> 랜더링 => 프레임을 만들어내는데 시간이 걸림
로직+랜더링 = time delta or delta time

프레임 속도: 프레임을 만들어 내는 속도, 프레임과 프레임 속도는 역수의 관계
FPS: Frame Per Sec, 초당 프레임 개수


프레임 시간과 프레임 rate가 일정하지 않음
-> windows 환경은 현재 피시에서 게임코드 외의 다른 부분들을 cpu에서 실행 중,불규칙하게 일어남

프레임 시간이 처리량에 따라 혹은 컴퓨터의 성능에 따라 차이 발생 -> 게임 밸런싱에 큰 문제를 야기함

캐릭터의 움직임을 물리 계산으로 조절, 게임 객체들의 운동에 시간의 개념을 도입
거리 = 경과 시간 * 속도
위치 = 초기 위치 + 거리

x: 객체의 위치
v: 객체의 속도(등속 운동 가정)
x(다음 프레임) = x(현재 프레임) + v * dt

속도 * 시간 = 방향(0, 1, -1) * 속력(m/s * 미터당 픽셀) * frame_time
=> 픽셀당 2D 공간의 물리값들을 먼저 결정할 필요가 있다.

게임 기획서 <- 캐릭터들의 실체적인 물리값을 정하는 것

애니메이션 프레임 -> 시간 * 속력 ,
속력 : 초당 몇번 애니메이션 프레임이 진행되는가
ACTION_PER_TIME = 1.0 / TIME_PER_ACTION
ANIMATIONFRAMES_PER_ACTION = 8
=> ANI-FRAME_PER_TIME * dt(frame_time)
프레임은 실수 단위로 계산이 되어야 함

clip_draw 함수는 정수 단위로 자르기 때문에 draw 함수에선 형변환 수행 필요

변화 -> 변하는 속도 * frame_time
